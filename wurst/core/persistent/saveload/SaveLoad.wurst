package SaveLoad

import YARPPrelude
import TerrainData
import AtmosphericData
import RegionSpecifier
import UnitData

public interface LoadActionCallback
    function run()

public class RegionSaveData extends Persistable
    private string name
    private rect area
    private vec2 origin = vec2(0, 0)
    private vec2 dimensions = vec2(0, 0)
    private var terrainData = new TerrainData
    private var unitData = new MultipleUnitData
    private var atmosphericData = new AtmosphericData
    private var valid = false

    construct(player owner, string name)
        super(owner, null)
        // super(owner, new XorEncryptor())
        this.name = name

    ondestroy
        destroy terrainData
        destroy unitData
        area.remove()

    override function getPath() returns string
        return "yarp2/saves/" + name + ".pld"

    override function serialize(DataWriter writer)
        writer.writeReal(origin.x)
        writer.writeReal(origin.y)

        writer.writeReal(dimensions.x)
        writer.writeReal(dimensions.y)

        terrainData.serialize(writer)
        unitData.serialize(writer)

        atmosphericData.serialize(writer)

    override function deserialize(DataReader reader)
        origin.x = reader.readReal()
        origin.y = reader.readReal()

        dimensions.x = reader.readReal()
        dimensions.y = reader.readReal()

        terrainData.deserialize(reader)
        unitData.deserialize(reader)

        atmosphericData.deserialize(reader)

    override function onSaved()
        destroy this

    override function onLoaded(LoadStatus status)
        if localPlayer == owner
            switch status
                case SUCCESS
                case FAIL_READ
                    YPrint.warn("Couldn't load the save file. No file exists or it has been corrupted.")
                case FAIL_DESERIALIZE
                    YPrint.warn("Couldn't load the save file. It has been corrupted or is outdated.")
                case FAIL_NO_PLAYER

        if status == LoadStatus.SUCCESS
            area.resize(vec2(-dimensions.x / 2, -dimensions.y / 2) + playableCenter, vec2(dimensions.x / 2, dimensions.y / 2) + playableCenter)
            valid = true

    function isValid() returns boolean
        return valid

    function startLoad(PersistableLoadCallback cb)
        this.area = Rect(0, 0, 0, 0)
        load(cb)

    function startPaste(vec2 offset, RegionSpecifier specifier, LoadActionCallback cb)
        if valid
            area.moveTo(offset)
            terrainData.apply(area)
            unitData.apply(area, owner)
            atmosphericData.apply(specifier)
            cb.run()
            destroy this

    function startSave(rect area, RegionSpecifier specifier)
        this.area = area.copy()
        terrainData.scan(area)
        unitData.scan(area)
        atmosphericData.scan(specifier)

        origin = area.getCenter()
        dimensions = vec2(area.width(), area.height())

        save()

    function getOrigin() returns vec2
        return origin

    function getWidth() returns real
        return area.width()

    function getHeight() returns real
        return area.height()