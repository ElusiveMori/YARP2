package Command

import YARPPrelude
import public Scripting
import public CommandWrappers
import public Argument
import public AliasMacro

public interface CommandCallback
	function run(CommandContext context, Arguments arguments)

/**
	Each command context is assigned several execution flags,
	which dictate which commands may or may not be executed
	in it.

	SPAWN - Indicates that this command may spawn units.
	UNIT_MODIFY - Indicates that this command may modify units.
	EXECUTE_COMMAND - Indicates that this command may execute other commands.
	DIRECT - Indicates that this command may only be directly called by the player, never from any other commands.
**/
public enum CommandExecutionFlag
	SPAWN
	UNIT_MODIFY
	EXECUTE_COMMAND
	DIRECT

public class CommandPermission
	private string permission

	construct(string permission)
		this.permission = permission

	function getName() returns string
		return permission

public class Command
	private string command
	private CommandCallback callback
	private LinkedList<CommandPermission> permissions
	private bitset flags

	construct(string command, LinkedList<CommandPermission> permissions, bitset flags, CommandCallback callback)
		this.command = command
		this.permissions = permissions
		this.flags = flags
		this.callback = callback

	function getCallback() returns CommandCallback
		return callback

public class CommandRegistry
	private static constant registry = new HashMap<int, Command>
	private static constant commands = new LinkedList<string>

	static function register(string commandName, Command command) returns Command
		registry.put(commandName.getHash(), command)
		commands.push(commandName)
		return command
	
	static function get(string commandName) returns Command
		return registry.get(commandName.getHash())

	static function getAll() returns LinkedList<string>
		return commands

/**
	Holds data related to the execution of commands within a single context.
**/
public class CommandContext
	private constant commandStack = new LinkedList<CommandParser>()
	private CommandExecutor executor
	private ScriptContext scriptContext
	private LinkedList<unit> selection
	private var isHalted = false

	construct(CommandExecutor executor, ScriptContext scriptContext)
		this.executor = executor
		this.selection = executor.owner().selectedUnitsList()
		this.scriptContext = scriptContext

	ondestroy
		destroy selection
		for parser in commandStack
			destroy parser
		destroy commandStack

	/** Executes the next command in the current CommandParser, popping the parser if it's empty. **/
	protected function next()
		if isHalted or commandStack.isEmpty()
			executor.notifyFinished(this)
			return

		let commandParser = commandStack.peek()
		if commandParser != null
			if not commandParser.isFinished()
				var command = commandParser.nextToken()
				let macroExpansion = MacroRegistry.getExpansion(executor.owner(), command)
				if macroExpansion != null
					command = macroExpansion

				let arguments = new Arguments(new ArgumentParser(command), scriptContext)
				let aliasExpansion = AliasRegistry.getExpansion(executor.owner(), arguments.getString(0))
				if aliasExpansion != null
					let newCommand = aliasExpansion + " " + arguments.getRest(false)
					destroy arguments
					run(newCommand)
				else
					let callback = CommandRegistry.get(arguments.getString(0))
					if callback != null
						run(callback, arguments)
					destroy arguments
			else
				commandStack.pop()
				destroy commandParser

	/** Parses the command string, pushes it onto the stack and executes it. **/
	function run(string command)
		let parser = new CommandParser(command)
		commandStack.push(parser)
		next()

	/** Directly executes the specified command **/
	function run(Command command, Arguments arguments)
		command.getCallback().run(this, arguments)

	/** Continues executing commands in this context and catches any errors **/
	function continue()
		let success = try() ->
			next()
		
		if not success
			Log.warn("CommandCallback [ID " + (this castTo int).toString() + "] by player " + owner().getNameColored() + " has crashed.")
			Log.warn("Error: " + lastError)

	function selection() returns LinkedList<unit>
		return selection

	function scriptContext() returns ScriptContext
		return scriptContext

	function owner() returns player
		return executor.owner()

	function halt()
		isHalted = true
		for parser in commandStack
			destroy parser

public class CommandExecutor
	private var contextList = new LinkedList<CommandContext>
	private var scriptContext = new ScriptContext()
	protected static var executors = new HashMap<player, CommandExecutor>
	player owner

	construct(player owner)
		this.owner = owner

	protected function newContext() returns CommandContext
		let context = new CommandContext(this, scriptContext)
		contextList.add(context)
		return context

	protected function notifyFinished(CommandContext context)
		contextList.remove(context)
		destroy context

	protected static function get(player who) returns CommandExecutor
		return executors.get(who)

	function owner() returns player
		return owner

	function execute(string command)
		newContext().run(command)

	@compiletime
	protected static function createExecutors()
		forAllPlayers() (who) ->
			let executor = new CommandExecutor(who)
			executors.put(who, executor)

public function player.executor() returns CommandExecutor
	return CommandExecutor.get(this)

init
	CommandExecutor.createExecutors()

public enum CollisionCheck
	NO_COLLISION
	MACRO_COLLISION
	ALIAS_COLLISION
	COMMAND_COLLISION

public tuple collisioncheckresult(CollisionCheck status, string message)

public class CommandUtils
	static function registerMacro(player who, string macro, string expansion) returns collisioncheckresult
		let collisionCheck = checkResolutionCollisionForMacro(who, macro)

		if collisionCheck.status == CollisionCheck.NO_COLLISION
			MacroRegistry.registerMacro(who, macro, expansion, false)

		return collisionCheck

	static function registerDefaultMacro(string macro, string expansion)
		MacroRegistry.registerDefaultMacro(macro, expansion)

	static function registerAlias(player who, string aliaz, string expansion) returns collisioncheckresult
		let collisionCheck = checkResolutionCollision(who, aliaz)

		if collisionCheck.status == CollisionCheck.NO_COLLISION
			AliasRegistry.registerAlias(who, aliaz, expansion, false)

		return collisionCheck

	static function registerDefaultAlias(string aliaz, string expansion)
		AliasRegistry.registerDefaultAlias(aliaz, expansion)
	
	/**
		Check if a given input string would collide with any
		existing commands, aliases or macros.
	**/
	static function checkResolutionCollision(player who, string input) returns collisioncheckresult
		for macro in MacroRegistry.getMacros(who)
			if input.startsWith(macro.input)
				return collisioncheckresult(CollisionCheck.MACRO_COLLISION, "collision with macro " + macro.toString())

		for aliaz in AliasRegistry.getAliases(who)
			if input == aliaz.input
				return collisioncheckresult(CollisionCheck.ALIAS_COLLISION, "collision with alias " + aliaz.toString())

		for command in CommandRegistry.getAll()
			if input == command
				return collisioncheckresult(CollisionCheck.COMMAND_COLLISION, "collision with command " + command)

		return collisioncheckresult(CollisionCheck.NO_COLLISION, null)

	/**
		Check if a given string, if added as a macro,
		would collide with any existing commands,
		macros, or aliases.
	**/
	static function checkResolutionCollisionForMacro(player who, string input) returns collisioncheckresult
		for macro in MacroRegistry.getMacros(who)
			if macro.input.startsWith(input)
				return collisioncheckresult(CollisionCheck.MACRO_COLLISION, "collision with macro " + macro.toString())
		
		for aliaz in AliasRegistry.getAliases(who)
			if aliaz.input.startsWith(input)
				return collisioncheckresult(CollisionCheck.ALIAS_COLLISION, "collision with alias " + aliaz.toString())

		for command in CommandRegistry.getAll()
			if command.startsWith(input)
				return collisioncheckresult(CollisionCheck.COMMAND_COLLISION, "collision with command " + command)

		return checkResolutionCollision(who, input)
			