package AreaData

import YARP

constant string charMap = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSUTVWXYZ"

class TerrainCell
    protected string data
    private int current = 0

    construct()
        this.data = ""

    construct(string data)
        this.data = data

    function next(HashMap<char, int> tileMap) returns int
        if current >= data.length()
            return 0

        let val = tileMap.get(data.charAt(current).toChar())
        current++

        return val

class TerrainData implements BufferSerializable
    private let tileMap = new IterableMap<char, int>
    private let cellList = new LinkedList<TerrainCell>

    private var currentNewChar = 0
    private var currentCell = new TerrainCell

    construct()

    ondestroy
        destroy tileMap
        destroy cellList
        destroy currentCell

    function apply(rect area)
        let iter = area.tileIterator()

        executeWhile(1024, () -> iter.hasNext()) ->
            let id = cellList.peek().next(tileMap)

            if id == 0
                destroy cellList.pop()
                if cellList.isEmpty()
                    iter.close()
            else
                iter.next().setType(id)

        destroy iter

    function scan(rect area)
        let tileMapInverted = new HashMap<int, char>
        let iter = area.tileIterator()

        while iter.hasNext()
            execute() ->
                for i = 0 to 1023
                    if iter.hasNext()
                        let currentTile = iter.next()
                        let id = currentTile.getType()
                        if not tileMapInverted.has(id)
                            let tileChar = charMap.charAt(currentNewChar).toChar()
                            tileMapInverted.put(id, tileChar)
                            tileMap.put(tileChar, id)
                            currentNewChar++
                        
                        currentCell.data += tileMapInverted.get(id).toString()
                        if currentCell.data.length() >= 1023
                            cellList.push(currentCell)
                            currentCell = new TerrainCell
                    else
                        break

        cellList.push(currentCell)

        destroy iter
        destroy tileMapInverted

    override function serialize(Buffer buffer)
        buffer.writeInt(tileMap.size())
        for key in tileMap
            let val = tileMap.get(key).toRawCode()
            buffer.writeString(key.toString())
            buffer.writeString(val)
        
        buffer.writeInt(cellList.size())
        for cell in cellList
            buffer.writeString(cell.data)

    override function deserialize(Buffer buffer)
        var count = buffer.readInt()
        for i = 1 to count
            let key = buffer.readString()
            let val = buffer.readString()
            tileMap.put(char(key), val.fromRawCode())

        count = buffer.readInt()
        for i = 1 to count
            let cell = buffer.readString()
            cellList.push(new TerrainCell(cell))

public class AreaData implements BufferSerializable
    private TerrainData terrain

    construct()
        this.terrain = new TerrainData

    ondestroy
        destroy terrain

    override function serialize(Buffer buffer)
        terrain.serialize(buffer)

    override function deserialize(Buffer buffer)
        terrain.deserialize(buffer)

    function scan(rect area)
        terrain.scan(area)

    function apply(rect area)
        terrain.apply(area)