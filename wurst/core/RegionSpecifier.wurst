package RegionSpecifier

import initlater YARP

public constant REGION_SPECIFIER_ID = compiletime(UNIT_ID_GEN.next())
public constant REGION_SPECIFIER_LOAD_ID = compiletime(ABIL_ID_GEN.next())
constant REGION_CUTOFF_THRESHOLD = 500.

public tuple terrainfog(boolean state, real min, real max, real r, real g, real b)

public tuple colorcorrect(boolean state, int r, int g, int b)
public class RegionSpecifier
    use LinkedListModule

    protected static thistype array lookup

    private unit what
    private rect area

    private lightning horizTop = AddLightning(LIGHTNING_DRAIN_MANA, false, 0, 0, 0, 0)
    private lightning horizBot = AddLightning(LIGHTNING_DRAIN_MANA, false, 0, 0, 0, 0)
    private lightning vertLeft = AddLightning(LIGHTNING_DRAIN_MANA, false, 0, 0, 0, 0)
    private lightning vertRight = AddLightning(LIGHTNING_DRAIN_MANA, false, 0, 0, 0, 0)

    private terrainfog fog = terrainfog(false, 0, 0, 0, 0, 0)
    private colorcorrect corrector = colorcorrect(false, 0, 0, 0)

    private RegionSaveData saveData

    construct(player owner, vec2 pos)
        what = createUnit(owner, REGION_SPECIFIER_ID, pos, angle(0))
        lookup[what.getIndex()] = this

        snap()
        area = Rect(what.getX() - 64, what.getY() - 64, what.getX() + 64, what.getY() + 64)

        setHintLinesColor(colorA(0, 0, 0, 0))
        updateHintLines()
    
    ondestroy
        lookup[what.getIndex()] = null
        what.remove()
        area.remove()
        horizTop.destr()
        horizBot.destr()
        vertLeft.destr()
        vertRight.destr()

    function addWidth(real amount)
        setWidth(area.width() + amount)

    function addHeight(real amount)
        setHeight(area.height() + amount)

    function setWidth(real amount)
        area.resize(area.getLeftBot(), area.getLeftTop() + vec2(amount, 0))
        snap()
        updateHintLines()

    function setHeight(real amount)
        area.resize(area.getLeftBot(), area.getRightBot() + vec2(0, amount))
        snap()
        updateHintLines()

    function area() returns rect
        return area

    function getUnit() returns unit
        return what

    function getFog() returns terrainfog
        return fog

    function setFog(terrainfog fog)
        this.fog = fog

    function getColorCorrect() returns colorcorrect
        return corrector

    function setColorCorrect(colorcorrect corrector)
        this.corrector = corrector

    function initLoad(RegionSaveData data)
        saveData = data
        what.addAbility(REGION_SPECIFIER_LOAD_ID)

    function startLoad(LoadActionCallback cb)
        saveData.startPaste(what.getPos(), cb)
        destroy this

    private function snap()
        let pos = what.getPos().toTileCenter()
        what.setPos(pos)
        area.moveTo(pos)

    private function setHintLinesColor(colorA col)
        horizTop.setColor(col)
        horizBot.setColor(col)
        vertLeft.setColor(col)
        vertRight.setColor(col)

    private function updateHintLines()
        if localPlayer == what.getOwner()
            horizTop.move(false, area.getLeftTop(), area.getRightTop())
            horizBot.move(false, area.getLeftBot(), area.getRightBot())
            vertLeft.move(false, area.getLeftTop(), area.getLeftBot())
            vertRight.move(false, area.getRightTop(), area.getRightBot())
    
    protected function onSelected()
        if localPlayer == what.getOwner()
            setHintLinesColor(colorA(255, 255, 255, 255))

    protected function onDeselected()
        if localPlayer == what.getOwner()
            setHintLinesColor(colorA(0, 0, 0, 0))

    protected function onPointOrder()
        let order = GetIssuedOrderId()

        if order == Orders.smart or order == Orders.move
            what.setPos(getOrderPos())
        
        snap()
        updateHintLines()

        nullTimer() ->
            what.issueImmediateOrder("stop")

public class PointRegionInfo
    protected RegionSpecifier specifier
    protected real weight

    construct(RegionSpecifier specifier, real weight)
        this.specifier = specifier
        this.weight = weight

    function specifier() returns RegionSpecifier
        return specifier

    function weight() returns real
        return weight

function rangeFactor(real min, real max, real x, real threshold) returns real
    real value

    if (min <= x and max >= x)
        value = 1
    else if (x > max)
        value = 1 - min((x - max)/threshold, 1)
    else
        value = 1 - min((min - x)/threshold, 1)
    
    return value

public function unit.toRegionSpecifier() returns RegionSpecifier
    return RegionSpecifier.lookup[this.getIndex()]

public function vec2.getRegionSpecifiers() returns LinkedList<PointRegionInfo>
    let list = new LinkedList<PointRegionInfo>

    for specifier from RegionSpecifier.staticItr()
        let area = specifier.area()
        let weight = min(
            rangeFactor(area.getMinX(), area.getMaxX(), this.x, REGION_CUTOFF_THRESHOLD),
            rangeFactor(area.getMinY(), area.getMaxY(), this.y, REGION_CUTOFF_THRESHOLD)
            )
        list.push(new PointRegionInfo(specifier, weight))

    return list

init
    EventListener.add(EVENT_PLAYER_UNIT_SELECTED) ->
        let specifier = GetTriggerUnit().toRegionSpecifier()

        if specifier != null
            specifier.onSelected()

    EventListener.add(EVENT_PLAYER_UNIT_DESELECTED) ->
        let specifier = GetTriggerUnit().toRegionSpecifier()

        if specifier != null
            specifier.onDeselected()

    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
        let specifier = GetTriggerUnit().toRegionSpecifier()

        if specifier != null
            specifier.onPointOrder()

    EventListener.add(EVENT_PLAYER_UNIT_SPELL_CAST) ->
        let specifier = GetTriggerUnit().toRegionSpecifier()

        if specifier != null and GetSpellAbilityId() == REGION_SPECIFIER_LOAD_ID
            specifier.startLoad(null)
        
@compiletime function generateRegionSpecifier()
    new UnitDefinition(REGION_SPECIFIER_ID, 'hfoo')
        ..setName("Region Specifier")
        ..setMovementHeight(0)
        ..setSpeedBase(1)
        ..setTurnRate(3)
        ..setMovementType(MovementType.Fly)
        ..setUpgradesUsed("")
        ..setHitPointsMaximumBase(100)
        ..setSightRadiusDay(1500)
        ..setSightRadiusNight(1500)
        ..setCollisionSize(0)
        ..setUnitSoundSet("")
        ..setIconGameInterface("ReplaceableTextures\\WorldEditUI\\StartingLocation.blp")
        ..setMaximumPitchAngledegrees(0)
        ..setMaximumRollAngledegrees(0)
        ..setModelFile("Objects\\StartLocation\\StartLocation.mdl")
        ..setScalingValue(0.25)
        ..setSelectionScale(1.5)
        ..setShadowImageUnit("")
        ..setAttacksEnabled(0)
        ..setDefenseUpgradeBonus(0)
        ..setDefenseBase(0)
        ..setArmorType(ArmorType.Divine)
        ..setTooltipBasic("")
        ..setTooltipExtended("This is a region specifier.")
        ..setUnitClassification("peon")
        ..setNormalAbilities(commaList(AbilityIds.invulnerable))
        ..setAnimationBlendTimeseconds(0)
        ..setAnimationCastBackswing(0)
        ..setAnimationCastPoint(0)

    new ChannelAbilityPreset(REGION_SPECIFIER_LOAD_ID, 1, true)
        ..presetTargetTypes(Targettype.NONE)
        ..setName("Load!")
        ..setTooltipNormal(1, "Load!")
        ..setTooltipNormalExtended(1, "Loads your save into this location!")
        ..setIconNormal(Icons.bTNArthas)
        ..setCastingTime(1, 0)