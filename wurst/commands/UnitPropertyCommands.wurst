package UnitPropertyCommands

import YARP

init
    execute() ->
        let registrator = new CommandRegistrator()

        registrator.withFlag(CommandExecutionFlag.UNIT_MODIFY)
        
        registrator.registerUnit("remove") (context, arguments, what) ->
            what.remove()

        registrator.registerUnit("kill") (context, arguments, what) ->
            what.kill()

        registrator.registerUnit("explode") (context, arguments, what) ->
            what.explode()

        registrator.registerUnit("size") (context, arguments, what) ->
            what.setScale(arguments.getReal(1))

        registrator.registerUnit("sized") (context, arguments, what) ->
            what.setScale(what.getScale() + arguments.getReal(1))

        registrator.registerUnit("fa") (context, arguments, what) ->
            what.setFacing(arguments.getReal(1).asAngleDegrees())

        registrator.registerUnit("fd") (context, arguments, what) ->
            what.setFacing(what.getFacing() + arguments.getReal(1).asAngleDegrees())

        registrator.registerUnit("fly") (context, arguments, what) ->
            what.setHeight(arguments.getReal(1))

        registrator.registerUnit("flyd") (context, arguments, what) ->
            what.setHeight(what.getHeight() + arguments.getReal(1))

        registrator.registerUnit("name") (context, arguments, what) ->
            let name = arguments.getRest(false)
            if name != null and name != ""
                what.setName(name)
        
        registrator.registerUnit("shortdesc") (context, arguments, what) ->
            let desc = arguments.getRest(false)
            if desc != null and desc != ""
                what.setShortDesc(desc)
            else
                what.setShortDesc(null)

        registrator.registerUnit("heroname") (context, arguments, what) ->
            what.setHeroName(arguments.getRest(true))

        registrator.registerUnit("tint") (context, arguments, what) ->
            let r = ((arguments.getReal(1) / 100) * 255).toInt()
            let g = ((arguments.getReal(2) / 100) * 255).toInt()
            let b = ((arguments.getReal(3) / 100) * 255).toInt()
            let a = ((arguments.getReal(4) / 100) * 255).toInt()
            what.setTint(colorA(r, g, b, a))

        registrator.registerUnit("color") (context, arguments, what) ->
            let arg = arguments.getString(1)

            playercolor pc
            if arg.toInt() != 0
                pc = (arg.toInt() - 1).toPlayerColor()
            else
                pc = getColorFromString(arg)

            what.setColor(pc)

        registrator.registerUnit("setlife") (context, arguments, what) ->
            what.setMaxLife(arguments.getInt(1))

        registrator.registerUnit("setmana") (context, arguments, what) ->
            what.setMaxMana(arguments.getInt(1))

        registrator.registerUnit("setdam") (context, arguments, what) ->
            what.setDamage(arguments.getInt(1))

        registrator.registerUnit("setatkspd") (context, arguments, what) ->
            what.setAttackCooldown(arguments.getReal(1))

        registrator.registerUnit("addlife") (context, arguments, what) ->
            what.setMaxLife(what.getMaxLife().toInt() + arguments.getInt(1))

        registrator.registerUnit("addmana") (context, arguments, what) ->
            what.setMaxMana(what.getMaxMana().toInt() + arguments.getInt(1))

        registrator.registerUnit("adddam") (context, arguments, what) ->
            what.setDamage(what.getDamage() + arguments.getInt(1))

        registrator.registerUnit("addatkspd") (context, arguments, what) ->
            what.setAttackCooldown(what.getAttackCooldown() + arguments.getReal(1))

        registrator.registerUnit("movex") (context, arguments, what) ->
            what.u.setPos(what.u.getPos() + vec2(arguments.getReal(1), 0))

        registrator.registerUnit("movey") (context, arguments, what) ->
            what.u.setPos(what.u.getPos() + vec2(0, arguments.getReal(1)))

        registrator.registerUnit("move") (context, arguments, what) ->
            what.u.setPos(what.u.getPos() + vec2(arguments.getReal(1), arguments.getReal(2)))

        registrator.registerUnit("pitch") (context, arguments, what) ->
            what.setPitch(arguments.getReal(1).asAngleDegrees())

        registrator.registerUnit("roll") (context, arguments, what) ->
            what.setRoll(arguments.getReal(1).asAngleDegrees())