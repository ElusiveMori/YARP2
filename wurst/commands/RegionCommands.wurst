package RegionCommands

import initlater YARP

init
    let registrator = new CommandRegistrator()

    registrator.registerSimple("region") (context, arguments) ->
        let command = arguments.getString(1)
        let owner = context.owner()

        RegionSpecifier regionSpecifier = null

        for what in context.selection()
            let specifier = what.toRegionSpecifier()
            if what.isAccessibleBy(owner) and specifier != null
                regionSpecifier = specifier
                break
        
        switch command
            case ""
                new RegionSpecifier(owner, owner.getSpawner().getPos())
            case "width"
                if regionSpecifier != null
                    regionSpecifier.setWidth(128. + 256. * arguments.getInt(2))
            case "height"
                if regionSpecifier != null
                    regionSpecifier.setHeight(128. + 256. * arguments.getInt(2))
            case "size"
                if regionSpecifier != null
                    regionSpecifier.setHeight(128. + 256. * arguments.getInt(2))
                    regionSpecifier.setWidth(128. + 256. * arguments.getInt(2))
            case "tile"
                if regionSpecifier != null
                    let iter = regionSpecifier.area().tileIterator()
                    let tileId = arguments.getString(2).fromRawCode()
                    for tile from iter
                        tile.setType(tileId)
                    destroy iter
            case "save"
                let data = new RegionSaveData(owner, arguments.getString(2))
                data.startSave(regionSpecifier.area(), regionSpecifier)
            case "load"
                let data = new RegionSaveData(owner, arguments.getString(2))
                data.startLoad() (_) ->
                    if not data.isValid()
                        destroy data
                    else
                        let specifier = new RegionSpecifier(owner, data.getOrigin())
                        specifier.setWidth(data.getWidth())
                        specifier.setHeight(data.getHeight())
                        specifier.initLoad(data)
                        if localPlayer == owner
                            setCameraPosition(data.getOrigin())
                        owner.selectSingleUnit(specifier.getUnit())
            case "fog"
                let subcommand = arguments.getString(2)
                var fog = regionSpecifier.getFog()
                fog.state = true
                switch subcommand
                    case "off"
                        fog.state = false
                    case "color"
                        fog.r = arguments.getReal(3)
                        fog.g = arguments.getReal(4)
                        fog.b = arguments.getReal(5)
                    case "start"
                        fog.min = arguments.getReal(3)
                    case "end"
                        fog.max = arguments.getReal(3)
                regionSpecifier.setFog(fog)
            case "weather"
                let name = arguments.getString(2)
                let weatherId = StaticData.getWeatherId(name)
                regionSpecifier.setWeather(weatherId)
                        
                        