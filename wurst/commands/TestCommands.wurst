package TestCommands

import initlater YARP

class Box<T>
    T v

    construct(T v)
        this.v = v

init
    CommandRegistry.register("test") (context, arguments) ->
        print("arg1:" + arguments.getString(1))
        print("arg2:" + arguments.getString(2))
        print("arg3:" + arguments.getString(3))

    CommandRegistry.register("exec") (context, arguments) ->
        let success = try() -> 
            let eee = Niya.parse(arguments.getString(1))
            if eee.error != null
                print(eee.error)
            else
                print(eee.expr.eval(context.scriptContext()))
            print("Done!")
        if not success
            print("We fucked up")
            print(lastError)

    SimpleCommand.register("spawn") (context, arguments) ->
        let idString = arguments.getString(2)
        int id
        if idString.charAt(0) == "_"
            id = fromRawCode(idString.substring(1))
        else
            id = UnitId(idString)

        for i = 0 to arguments.getInt(1) - 1
            createUnit(context.owner(), id, vec2(0, 0), angle(0))

    SimpleCommand.register("n2") (context, argument) ->
        var s = ""
        for i = 0 to 1023
            s += "a"
        context.owner().setName(s)
        print(context.owner().getName())
        print(context.owner().getName().length())

    SimpleCommand.register("loadme") (context, argument) ->
        execute() ->
            PlayerSettings.get(context.owner()).load()

    SimpleCommand.register("network") (context, arguments) ->
        let net = new Network(context.owner())
        let owner = context.owner()

        if localPlayer == owner
            net.getData().writeInt(1)
            print("sending 1")

        net.start() (status, buffer) ->
            if localPlayer != owner
                print("received " + buffer.readInt().toString())

    SimpleCommand.register("splittest") (context, arguments) ->
        let nlparser = new LineSplitterParser(arguments.getString(2), arguments.getInt(1))
        print(nlparser.process())

    SimpleCommand.register("centerfactor") (context, arguments) ->
        centerFactor = arguments.getReal(1)
    
    SimpleCommand.register("offset") (context, arguments) ->
        staticOffset = arguments.getReal(1)

    SimpleCommand.register("logtest") (context, arguments) ->
        var box = new Box(0)
        try() ->
            while true
                BlzSetAbilityTooltip('Aabs', "asdfghj", 0)
                box.v++
        print(box.v)