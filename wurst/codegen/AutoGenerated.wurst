package AutoGenerated
import CodegenUtils

public constant TEST_UNIT_1 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_2 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_3 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_4 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_5 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_6 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_7 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_8 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_9 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_10 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_11 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_12 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_13 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_14 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_15 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_16 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_17 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_18 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_19 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_20 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_21 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_22 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_SHOP1 = compiletime(UNIT_ID_GEN.next())
public constant TEST_UNIT_SHOP2 = compiletime(UNIT_ID_GEN.next())

@compiletime function generate()
	CodegenUtils.customUnit(TEST_UNIT_1, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 1")
	CodegenUtils.customUnit(TEST_UNIT_2, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 2")
	CodegenUtils.customUnit(TEST_UNIT_3, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 3")
	CodegenUtils.customUnit(TEST_UNIT_4, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 4")
	CodegenUtils.customUnit(TEST_UNIT_5, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 5")
	CodegenUtils.customUnit(TEST_UNIT_6, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 6")
	CodegenUtils.customUnit(TEST_UNIT_7, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 7")
	CodegenUtils.customUnit(TEST_UNIT_8, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 8")
	CodegenUtils.customUnit(TEST_UNIT_9, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 9")
	CodegenUtils.customUnit(TEST_UNIT_10, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 10")
	CodegenUtils.customUnit(TEST_UNIT_11, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 11")
	CodegenUtils.customUnit(TEST_UNIT_12, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 1")
	CodegenUtils.customUnit(TEST_UNIT_13, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 2")
	CodegenUtils.customUnit(TEST_UNIT_14, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 3")
	CodegenUtils.customUnit(TEST_UNIT_15, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 4")
	CodegenUtils.customUnit(TEST_UNIT_16, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 5")
	CodegenUtils.customUnit(TEST_UNIT_17, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 6")
	CodegenUtils.customUnit(TEST_UNIT_18, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 7")
	CodegenUtils.customUnit(TEST_UNIT_19, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 8")
	CodegenUtils.customUnit(TEST_UNIT_20, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 9")
	CodegenUtils.customUnit(TEST_UNIT_21, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 10")
	CodegenUtils.customUnit(TEST_UNIT_22, "Units\\Undead\\Abomination\\Abomination.mdx", "Test Unit 11")

	CodegenUtils.unitShop(TEST_UNIT_SHOP1, "Buildings\\Other\\BarrowDens\\BarrowDens.mdx", "Test Shop 1", TEST_UNIT_1.toRawCode() + "," + TEST_UNIT_2.toRawCode() + "," + TEST_UNIT_3.toRawCode() + "," + TEST_UNIT_4.toRawCode() + "," + TEST_UNIT_5.toRawCode() + "," + TEST_UNIT_6.toRawCode() + "," + TEST_UNIT_7.toRawCode() + "," + TEST_UNIT_8.toRawCode() + "," + TEST_UNIT_9.toRawCode() + "," + TEST_UNIT_10.toRawCode() + "," + TEST_UNIT_11.toRawCode())
	CodegenUtils.unitShop(TEST_UNIT_SHOP2, "Buildings\\Other\\BarrowDens\\BarrowDens.mdx", "Test Shop 2", TEST_UNIT_12.toRawCode() + "," + TEST_UNIT_13.toRawCode() + "," + TEST_UNIT_14.toRawCode() + "," + TEST_UNIT_15.toRawCode() + "," + TEST_UNIT_16.toRawCode() + "," + TEST_UNIT_17.toRawCode() + "," + TEST_UNIT_18.toRawCode() + "," + TEST_UNIT_19.toRawCode() + "," + TEST_UNIT_20.toRawCode() + "," + TEST_UNIT_21.toRawCode() + "," + TEST_UNIT_22.toRawCode())

public function placeShops(real x, real y)
	let offset = vec2(x, y)
	let owner = players[bj_PLAYER_NEUTRAL_EXTRA]
	createUnit(owner, TEST_UNIT_SHOP1, offset + vec2(0, 0), angle(0))
	createUnit(owner, TEST_UNIT_SHOP2, offset + vec2(128, 0), angle(0))

public function makeUidRegistry() returns HashMap<int, int>
	let registry = new HashMap<int, int>
	registry.put(compiletime("test-unit-1".getHash()), TEST_UNIT_1)
	registry.put(compiletime("test-unit-10".getHash()), TEST_UNIT_10)
	registry.put(compiletime("test-unit-11".getHash()), TEST_UNIT_11)
	registry.put(compiletime("test-unit-12".getHash()), TEST_UNIT_12)
	registry.put(compiletime("test-unit-13".getHash()), TEST_UNIT_13)
	registry.put(compiletime("test-unit-14".getHash()), TEST_UNIT_14)
	registry.put(compiletime("test-unit-15".getHash()), TEST_UNIT_15)
	registry.put(compiletime("test-unit-16".getHash()), TEST_UNIT_16)
	registry.put(compiletime("test-unit-17".getHash()), TEST_UNIT_17)
	registry.put(compiletime("test-unit-18".getHash()), TEST_UNIT_18)
	registry.put(compiletime("test-unit-19".getHash()), TEST_UNIT_19)
	registry.put(compiletime("test-unit-2".getHash()), TEST_UNIT_2)
	registry.put(compiletime("test-unit-20".getHash()), TEST_UNIT_20)
	registry.put(compiletime("test-unit-21".getHash()), TEST_UNIT_21)
	registry.put(compiletime("test-unit-22".getHash()), TEST_UNIT_22)
	registry.put(compiletime("test-unit-3".getHash()), TEST_UNIT_3)
	registry.put(compiletime("test-unit-4".getHash()), TEST_UNIT_4)
	registry.put(compiletime("test-unit-5".getHash()), TEST_UNIT_5)
	registry.put(compiletime("test-unit-6".getHash()), TEST_UNIT_6)
	registry.put(compiletime("test-unit-7".getHash()), TEST_UNIT_7)
	registry.put(compiletime("test-unit-8".getHash()), TEST_UNIT_8)
	registry.put(compiletime("test-unit-9".getHash()), TEST_UNIT_9)
	registry.put(compiletime("test-unit-shop1".getHash()), TEST_UNIT_SHOP1)
	registry.put(compiletime("test-unit-shop2".getHash()), TEST_UNIT_SHOP2)
	return registry

public function makeUidReverseRegistry() returns HashMap<int, int>
	let registry = new HashMap<int, int>
	registry.put(TEST_UNIT_1, compiletime("test-unit-1".getHash()))
	registry.put(TEST_UNIT_10, compiletime("test-unit-10".getHash()))
	registry.put(TEST_UNIT_11, compiletime("test-unit-11".getHash()))
	registry.put(TEST_UNIT_12, compiletime("test-unit-12".getHash()))
	registry.put(TEST_UNIT_13, compiletime("test-unit-13".getHash()))
	registry.put(TEST_UNIT_14, compiletime("test-unit-14".getHash()))
	registry.put(TEST_UNIT_15, compiletime("test-unit-15".getHash()))
	registry.put(TEST_UNIT_16, compiletime("test-unit-16".getHash()))
	registry.put(TEST_UNIT_17, compiletime("test-unit-17".getHash()))
	registry.put(TEST_UNIT_18, compiletime("test-unit-18".getHash()))
	registry.put(TEST_UNIT_19, compiletime("test-unit-19".getHash()))
	registry.put(TEST_UNIT_2, compiletime("test-unit-2".getHash()))
	registry.put(TEST_UNIT_20, compiletime("test-unit-20".getHash()))
	registry.put(TEST_UNIT_21, compiletime("test-unit-21".getHash()))
	registry.put(TEST_UNIT_22, compiletime("test-unit-22".getHash()))
	registry.put(TEST_UNIT_3, compiletime("test-unit-3".getHash()))
	registry.put(TEST_UNIT_4, compiletime("test-unit-4".getHash()))
	registry.put(TEST_UNIT_5, compiletime("test-unit-5".getHash()))
	registry.put(TEST_UNIT_6, compiletime("test-unit-6".getHash()))
	registry.put(TEST_UNIT_7, compiletime("test-unit-7".getHash()))
	registry.put(TEST_UNIT_8, compiletime("test-unit-8".getHash()))
	registry.put(TEST_UNIT_9, compiletime("test-unit-9".getHash()))
	registry.put(TEST_UNIT_SHOP1, compiletime("test-unit-shop1".getHash()))
	registry.put(TEST_UNIT_SHOP2, compiletime("test-unit-shop2".getHash()))
	return registry

public function makeShopRegistry() returns HashSet<int>
	let registry = new HashSet<int>
	registry.add(TEST_UNIT_SHOP1)
	registry.add(TEST_UNIT_SHOP2)
	return registry
